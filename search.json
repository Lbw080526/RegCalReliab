[{"path":"https://lbw080526.github.io/RegCalReliab/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2025 Bowen Liu Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://lbw080526.github.io/RegCalReliab/articles/regcal_example.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"regcal_example","text":"RegCalReliab package provides unified framework regression calibration external internal reliability study designs. External reliability studies collect replicate measurements separate sample, internal reliability studies collect replicates within main study cohort. settings, regression calibration replaces error-prone exposures estimated conditional expectations, thereby correcting bias improving confidence interval coverage. document demonstrates use RegCalReliab simulation studies logistic regression model. generate data two error-prone exposures (z1, z2) two error-free covariates (W1, W2), true odds ratio 1.5 exposure. Results compared naïve analyses (ignoring measurement error) regression calibration, highlighting bias correction improved inference provided method.","code":"library(RegCalReliab)"},{"path":[]},{"path":"https://lbw080526.github.io/RegCalReliab/articles/regcal_example.html","id":"setup","dir":"Articles","previous_headings":"","what":"1. Setup","title":"regcal_example","text":"section load packages, fix seed, define helper functions. set true slope β\\beta = log(1.5), corresponding true odds ratio () 1.5 error-prone exposure.","code":"library(mgcv) #> Loading required package: nlme #> This is mgcv 1.9-3. For overview type 'help(\"mgcv-package\")'. set.seed(123)  # Helper for measurement error add_err = function(v, sd = sqrt(0.4)) v + rnorm(length(v), 0, sd)  # True coefficient (on log-odds scale) and OR beta = log(1.5) OR_true = 1.5"},{"path":"https://lbw080526.github.io/RegCalReliab/articles/regcal_example.html","id":"one-simulation-replicate-for-external-logistic","dir":"Articles","previous_headings":"","what":"2. One simulation replicate for External Logistic","title":"regcal_example","text":"single call simulate_once() generates one dataset fits regression calibration. main study 1500 subjects. external reliability study 1500 subjects 2, 3, 4 replicates per subject (padded NA). Error-free covariates W1 (continuous) W2 (binary) included. outcome Y generated logistic model slope log(1.5) exposures. call RC_ExReliab() link = “logistic” obtain naïve corrected estimates.","code":"simulate_once = function() {   # ---- True covariates ----   x = mgcv::rmvn(3000, c(0,0), matrix(c(1,0.3,0.3,1), 2))      # Error-free covariates (W1 = continuous, W2 = binary)   W1_main = rnorm(1500)   W2_main = rbinom(1500, 1, 0.5)   W1_rep  = rnorm(1500)   W2_rep  = rbinom(1500, 1, 0.5)      # ---- Main study error-prone Z ----   z.main = x[1:1500, 1:2] + matrix(rnorm(1500*2, 0, sqrt(0.4)), 1500, 2)   colnames(z.main) = c(\"z1\",\"z2\")      # ---- External replicates for Z ----   z1_rep = rbind(     cbind(add_err(x[1501:2000, 1]), add_err(x[1501:2000, 1]), NA, NA),     cbind(add_err(x[2001:2400, 1]), add_err(x[2001:2400, 1]), add_err(x[2001:2400, 1]), NA),     cbind(add_err(x[2401:3000, 1]), add_err(x[2401:3000, 1]), add_err(x[2401:3000, 1]), add_err(x[2401:3000, 1]))   )   colnames(z1_rep) = paste0(\"z1_\", 1:4)      z2_rep = rbind(     cbind(add_err(x[1501:2000, 2]), add_err(x[1501:2000, 2]), NA, NA),     cbind(add_err(x[2001:2400, 2]), add_err(x[2001:2400, 2]), add_err(x[2001:2400, 2]), NA),     cbind(add_err(x[2401:3000, 2]), add_err(x[2401:3000, 2]), add_err(x[2401:3000, 2]), add_err(x[2401:3000, 2]))   )   colnames(z2_rep) = paste0(\"z2_\", 1:4)         # ---- Outcome ----   p = plogis(-2.3 + beta*rowSums(x[1:1500, ]) + 0.5*W1_main - 0.3*W2_main)   Y = rbinom(1500, 1, p)      main_data = data.frame(     Y = Y,     z1 = z.main[, \"z1\"],     z2 = z.main[, \"z2\"],     W1 = W1_main,     W2 = W2_main   )      rep_data = data.frame(z1_rep, z2_rep, W1 = W1_rep, W2 = W2_rep, check.names = FALSE)      # ---- Regression Calibration ----   res = RC_ExReliab(     formula = Y ~ z1(z1_1, z1_2, z1_3, z1_4) + z2(z2_1, z2_2, z2_3, z2_4) + W1 + W2,     main_data = main_data,     rep_data = rep_data,     link = \"logistic\"   )      return(res) }"},{"path":"https://lbw080526.github.io/RegCalReliab/articles/regcal_example.html","id":"simulation-replicate","dir":"Articles","previous_headings":"","what":"3. 100 simulation replicate","title":"regcal_example","text":"repeat entire simulation 100 times. run returns results object containing two tables: uncorrected = naïve logistic regression ignoring measurement error. corrected = regression calibration estimates adjusted error.","code":"B = 100 results_list = replicate(B, simulate_once(), simplify = FALSE)  # Extract naive + corrected tables naive_tabs = lapply(results_list, function(x) x$uncorrected) corrected_tabs = lapply(results_list, function(x) x$corrected)"},{"path":"https://lbw080526.github.io/RegCalReliab/articles/regcal_example.html","id":"average-estimates-across-simulations","dir":"Articles","previous_headings":"","what":"4. Average estimates across simulations","title":"regcal_example","text":"compute Monte Carlo average parameter estimates across 100 runs.","code":"avg_naive = Reduce(\"+\", naive_tabs) / B avg_corrected = Reduce(\"+\", corrected_tabs) / B  cat(\"\\nAverage Naive Logistic Estimates (B = \", B, \"):\\n\", sep = \"\") #>  #> Average Naive Logistic Estimates (B = 100): print(round(avg_naive, 5)) #>             Estimate Std. Error   z value Pr(>|z|)      OR  CI.low CI.high #> (Intercept) -2.42815    0.10346 -23.48130  0.00000 0.08867 0.07247 0.10850 #> z1           0.31217    0.07817   3.98303  0.00788 1.37202 1.17689 1.59956 #> z2           0.30522    0.07817   3.90866  0.00644 1.36085 1.16754 1.58622 #> W1           0.48754    0.09118   5.34146  0.00003 1.63443 1.36664 1.95482 #> W2          -0.29440    0.17911  -1.63803  0.20679 0.75665 0.53294 1.07444  cat(\"\\nAverage Corrected Logistic Estimates (B = \", B, \"):\\n\", sep = \"\") #>  #> Average Corrected Logistic Estimates (B = 100): print(round(avg_corrected, 5)) #>             Estimate Std. Error   z value Pr(>|z|)      OR  CI.low CI.high #> (Intercept) -2.42815    0.10358 -23.46051  2.00000 0.08867 0.07245 0.10853 #> z1           0.40940    0.11609   3.52319  0.02041 1.51921 1.20951 1.90864 #> z2           0.39907    0.11638   3.43776  0.01553 1.50019 1.19418 1.88504 #> W1           0.48707    0.09112   5.35650  0.00003 1.63355 1.36619 1.95351 #> W2          -0.29554    0.17953  -1.64100  1.76609 0.75584 0.53191 1.07419"},{"path":"https://lbw080526.github.io/RegCalReliab/articles/regcal_example.html","id":"coverage-rate-cr-calculation","dir":"Articles","previous_headings":"","what":"5. Coverage-rate (CR) calculation","title":"regcal_example","text":"Finally, evaluate whether true = 1.5 lies within 95% confidence intervals. Coverage computed percentage simulation replicates whose CI covers true . Good coverage (~95%) indicates variance estimator accurate. Naïve estimates typically show attenuation bias poor coverage, corrected estimates recover true slope coverage close nominal level.","code":"inside_ci = function(tab, i, truth = OR_true) {   ci = tab[i , c(\"CI.low\", \"CI.high\")]   ci[1] <= truth && truth <= ci[2] }  row_z1 = which(rownames(avg_naive) == \"z1\") row_z2 = which(rownames(avg_naive) == \"z2\")  coverage = function(tab_list, row) {   mean(sapply(tab_list, function(tab) inside_ci(tab, row))) * 100 }  cov_z1_naive = coverage(naive_tabs, row_z1) cov_z1_corr = coverage(corrected_tabs, row_z1) cov_z2_naive = coverage(naive_tabs, row_z2) cov_z2_corr = coverage(corrected_tabs, row_z2)  cat(\"\\nCoverage of TRUE OR = 1.5 for error-prone exposure z1:\\n\") #>  #> Coverage of TRUE OR = 1.5 for error-prone exposure z1: cat(sprintf(\"  • Naive                 : %5.1f %%\\n\", cov_z1_naive)) #>   • Naive                 :  77.0 % cat(sprintf(\"  • Regression Calibration: %5.1f %%\\n\", cov_z1_corr)) #>   • Regression Calibration:  92.0 %  cat(\"\\nCoverage of TRUE OR = 1.5 for error-prone exposure z2:\\n\") #>  #> Coverage of TRUE OR = 1.5 for error-prone exposure z2: cat(sprintf(\"  • Naive                 : %5.1f %%\\n\", cov_z2_naive)) #>   • Naive                 :  76.0 % cat(sprintf(\"  • Regression Calibration: %5.1f %%\\n\", cov_z2_corr)) #>   • Regression Calibration:  96.0 %"},{"path":[]},{"path":"https://lbw080526.github.io/RegCalReliab/articles/regcal_example.html","id":"setup-1","dir":"Articles","previous_headings":"","what":"1. Setup","title":"regcal_example","text":"section load packages, fix seed, define helper functions. set true slope β\\beta = log(1.5), corresponding true odds ratio () 1.5 error-prone exposure.","code":"library(mgcv) set.seed(123)  # Helper for measurement error add_err = function(v, sd = sqrt(0.4)) v + rnorm(length(v), 0, sd)  # True slope and OR beta = log(1.5) OR_true = 1.5"},{"path":"https://lbw080526.github.io/RegCalReliab/articles/regcal_example.html","id":"one-simulation-replicate-for-internal-logistic","dir":"Articles","previous_headings":"","what":"2. One simulation replicate for Internal Logistic","title":"regcal_example","text":"generate one dataset main study reliability information. Replicates included main_data frame. x1, x2 error-prone exposures 1–4 replicates W1 continuous error-free covariate W2 binary covariate, dependent x1 Y generated logistic model slope log(1.5)","code":"simulate_once = function() {   # ---- True covariates ----   x = mgcv::rmvn(3000, c(0,0,0),                   matrix(c(1,0.3,0.2,                            0.3,1,0.5,                            0.2,0.5,1), nrow = 3))      # Binary W2 depends on x1   w2 = sapply(x[,1], function(t) {     if (t > median(x[,1])) rbinom(1,1,0.5) else rbinom(1,1,0.3)   })      # Error-free covariates   W = cbind(x[,3], w2)   colnames(W) = c(\"W1\", \"W2\")      # ---- Replicate design ----   r = c(rep(1,1500), rep(2,500), rep(3,400), rep(4,600))      # Replicates for z1   z1 = rbind(     cbind(add_err(x[1:1500, 1]), NA, NA, NA),     cbind(add_err(x[1501:2000, 1]), add_err(x[1501:2000, 1]), NA, NA),     cbind(add_err(x[2001:2400, 1]), add_err(x[2001:2400, 1]), add_err(x[2001:2400, 1]), NA),     cbind(add_err(x[2401:3000, 1]), add_err(x[2401:3000, 1]), add_err(x[2401:3000, 1]), add_err(x[2401:3000, 1]))   )   colnames(z1) = paste0(\"z1_\",1:4)      # Replicates for z2   z2 = rbind(     cbind(add_err(x[1:1500, 2]), NA, NA, NA),     cbind(add_err(x[1501:2000, 2]), add_err(x[1501:2000, 2]), NA, NA),     cbind(add_err(x[2001:2400, 2]), add_err(x[2001:2400, 2]), add_err(x[2001:2400, 2]), NA),     cbind(add_err(x[2401:3000, 2]), add_err(x[2401:3000, 2]), add_err(x[2401:3000, 2]), add_err(x[2401:3000, 2]))   )   colnames(z2) = paste0(\"z2_\",1:4)      # ---- Outcome ----   p = plogis(-2.65 + beta*rowSums(x[,1:3]) + beta*w2)   Y = rbinom(3000, 1, p)      # ---- Main data with outcome, replicates, covariates ----   main_data = data.frame(Y, z1, z2, W)      # ---- Regression calibration ----   res = RC_InReliab(     formula   = Y ~ myz1(z1_1, z1_2, z1_3, z1_4) +                   myz2(z2_1, z2_2, z2_3, z2_4) +                   W1 + W2,     main_data = main_data,     link      = \"logistic\"   )      return(res) }"},{"path":"https://lbw080526.github.io/RegCalReliab/articles/regcal_example.html","id":"simulation-replicate-1","dir":"Articles","previous_headings":"","what":"3. 100 simulation replicate","title":"regcal_example","text":"repeat entire simulation 100 times. run returns results object containing two tables: uncorrected = naïve logistic regression ignoring measurement error. corrected = regression calibration estimates adjusted error.","code":"B = 100 results_list = replicate(B, simulate_once(), simplify = FALSE)  # Collect naïve + corrected tables naive_tabs = lapply(results_list, function(x) x$uncorrected) corrected_tabs = lapply(results_list, function(x) x$corrected)"},{"path":"https://lbw080526.github.io/RegCalReliab/articles/regcal_example.html","id":"average-estimates-across-simulations-1","dir":"Articles","previous_headings":"","what":"4. Average estimates across simulations","title":"regcal_example","text":"compute Monte Carlo average parameter estimates across 100 runs.","code":"avg_naive = Reduce(\"+\", naive_tabs) / B avg_corrected = Reduce(\"+\", corrected_tabs) / B  cat(\"\\nAverage Naive Logistic Estimates (B = \", B, \"):\\n\", sep = \"\") #>  #> Average Naive Logistic Estimates (B = 100): print(round(avg_naive, 5)) #>             Estimate Std. Error   z value Pr(>|z|)      OR  CI.low CI.high #> (Intercept) -2.46347    0.07564 -32.57857  0.00000 0.08536 0.07362 0.09896 #> myz1         0.32896    0.05891   5.58205  0.00001 1.39137 1.23960 1.56175 #> myz2         0.31140    0.06348   4.90541  0.00038 1.36817 1.20808 1.54949 #> W1           0.45731    0.07129   6.41244  0.00000 1.58342 1.37684 1.82102 #> W2           0.44009    0.12598   3.49568  0.01636 1.56768 1.22472 2.00674  cat(\"\\nAverage Corrected Logistic Estimates (B = \", B, \"):\\n\", sep = \"\") #>  #> Average Corrected Logistic Estimates (B = 100): print(round(avg_corrected, 5)) #>             Estimate Std. Error   z value Pr(>|z|)      OR  CI.low CI.high #> (Intercept) -2.46506    0.07559 -32.62875  2.00000 0.08522 0.07352 0.09880 #> myz1         0.40418    0.07632   5.29511  0.00003 1.50144 1.29271 1.74396 #> myz2         0.39760    0.08593   4.62977  0.00093 1.49393 1.26225 1.76824 #> W1           0.40044    0.07559   5.29969  0.00005 1.49629 1.29017 1.73539 #> W2           0.41099    0.12687   3.24107  0.02646 1.52313 1.18781 1.95316"},{"path":"https://lbw080526.github.io/RegCalReliab/articles/regcal_example.html","id":"coverage-rate-cr-calculation-1","dir":"Articles","previous_headings":"","what":"5. Coverage-rate (CR) calculation","title":"regcal_example","text":"Finally, evaluate whether true = 1.5 lies within 95% confidence intervals. Coverage computed percentage simulation replicates whose CI covers true . Good coverage (~95%) indicates variance estimator accurate. Naïve estimates typically show attenuation bias poor coverage, corrected estimates recover true slope coverage close nominal level.","code":"inside_ci = function(tab, i, truth = OR_true) {   ci = tab[i , c(\"CI.low\", \"CI.high\")]   ci[1] <= truth && truth <= ci[2] }  row_z1 = which(rownames(avg_naive) == \"myz1\") row_z2 = which(rownames(avg_naive) == \"myz2\")  coverage = function(tab_list, row) {   mean(sapply(tab_list, function(tab) inside_ci(tab, row))) * 100 }  cov_z1_naive = coverage(naive_tabs, row_z1) cov_z1_corr = coverage(corrected_tabs, row_z1) cov_z2_naive = coverage(naive_tabs, row_z2) cov_z2_corr = coverage(corrected_tabs, row_z2)  cat(\"\\nCoverage of TRUE OR = 1.5 for error-prone exposure z1:\\n\") #>  #> Coverage of TRUE OR = 1.5 for error-prone exposure z1: cat(sprintf(\"  • Naive                 : %5.1f %%\\n\", cov_z1_naive)) #>   • Naive                 :  73.0 % cat(sprintf(\"  • Regression Calibration: %5.1f %%\\n\", cov_z1_corr)) #>   • Regression Calibration:  96.0 %  cat(\"\\nCoverage of TRUE OR = 1.5 for error-prone exposure z2:\\n\") #>  #> Coverage of TRUE OR = 1.5 for error-prone exposure z2: cat(sprintf(\"  • Naive                 : %5.1f %%\\n\", cov_z2_naive)) #>   • Naive                 :  70.0 % cat(sprintf(\"  • Regression Calibration: %5.1f %%\\n\", cov_z2_corr)) #>   • Regression Calibration:  92.0 %"},{"path":"https://lbw080526.github.io/RegCalReliab/articles/regcal_example.html","id":"summary","dir":"Articles","previous_headings":"","what":"Summary","title":"regcal_example","text":"document illustrates use RegCalReliab package regression calibration measurement error logistic regression models. Two study designs demonstrated: External reliability studies, replicate measurements collected separate sample. Internal reliability studies, replicates collected within main study. cases, simulate data two error-prone exposures (z1, z2) two error-free covariates (W1, W2). true odds ratio exposure set 1.5. Key findings simulations: Naïve logistic regression, ignores measurement error, shows attenuation bias (estimates biased toward null) poor confidence interval coverage. Regression calibration corrects bias, yielding average estimates closer true odds ratio. Coverage probabilities 95% confidence intervals regression calibration close nominal level (~ 95%), indicating method recovers valid inference external internal reliability designs. Overall, document demonstrates regression calibration effective practical method addressing measurement error regression models, RegCalReliab package provides unified framework implementation external internal reliability studies.","code":""},{"path":"https://lbw080526.github.io/RegCalReliab/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Bowen Liu. Author, maintainer, copyright holder. Yu Lu. Author. Molin Wang. Author.","code":""},{"path":"https://lbw080526.github.io/RegCalReliab/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Liu B, Lu Y, Wang M (2025). RegCalReliab: Regression Calibration Using Reliability Studies. R package version 0.1.0, https://lbw080526.github.io/RegCalReliab.","code":"@Manual{,   title = {RegCalReliab: Regression Calibration Using Reliability Studies},   author = {Bowen Liu and Yu Lu and Molin Wang},   year = {2025},   note = {R package version 0.1.0},   url = {https://lbw080526.github.io/RegCalReliab}, }"},{"path":"https://lbw080526.github.io/RegCalReliab/index.html","id":"regcalreliab","dir":"","previous_headings":"","what":"Regression Calibration Using Reliability Studies","title":"Regression Calibration Using Reliability Studies","text":"RegCalReliab R package performing regression calibration regression models covariate measurement error, using data external internal reliability studies. Authors: [Yu Lu; Molin Wang, Bowen Liu] Version: 0.1.0","code":""},{"path":"https://lbw080526.github.io/RegCalReliab/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Regression Calibration Using Reliability Studies","text":"can install development version RegCalReliab GitHub: can also get official release version CRAN:","code":"library(devtools) install_github(\"Lbw080526/RegCalReliab\") # install.packages(\"RegCalReliab\") install.packages(\"RegCalReliab\")"},{"path":"https://lbw080526.github.io/RegCalReliab/index.html","id":"documentation-and-examples","dir":"","previous_headings":"","what":"Documentation and Examples","title":"Regression Calibration Using Reliability Studies","text":"detailed examples usage RegCalReliab package, please refer vignette available pkgdown website.","code":""},{"path":"https://lbw080526.github.io/RegCalReliab/reference/RC_ExReliab.html","id":null,"dir":"Reference","previous_headings":"","what":"Unified Regression Calibration Wrapper (External Reliability Study) — RC_ExReliab","title":"Unified Regression Calibration Wrapper (External Reliability Study) — RC_ExReliab","text":"single formula interface regression calibration external reliability studies. user simply specifies `link = \"linear\"`, `\"logistic\"`, `\"log\"`, wrapper selects appropriate model:   * `\"linear\"`   → Gaussian (identity link)   * `\"logistic\"` → Binomial (logit link)   * `\"log\"`      → Poisson (log link)","code":""},{"path":"https://lbw080526.github.io/RegCalReliab/reference/RC_ExReliab.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Unified Regression Calibration Wrapper (External Reliability Study) — RC_ExReliab","text":"","code":"RC_ExReliab(   formula,   main_data,   rep_data,   link = c(\"linear\", \"logistic\", \"log\"),   return_details = FALSE )"},{"path":"https://lbw080526.github.io/RegCalReliab/reference/RC_ExReliab.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Unified Regression Calibration Wrapper (External Reliability Study) — RC_ExReliab","text":"formula formula character string `Y ~ sbp(sbp2, sbp3) + chol(chol2, chol3) + age + weight`. Terms form `var(rep1, rep2, ...)` treated error-prone exposures replicates `rep_data`; terms treated covariates W. main_data Data frame holding outcome, error-prone exposures, covariates. rep_data Data frame holding replicate columns referenced `formula`. link Character; one `\"linear\"`, `\"logistic\"`, `\"log\"`. return_details Logical; `TRUE`, return parsed, prepared, RC internals.","code":""},{"path":"https://lbw080526.github.io/RegCalReliab/reference/RC_ExReliab.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Unified Regression Calibration Wrapper (External Reliability Study) — RC_ExReliab","text":"list :   * `uncorrected`: naive regression estimates   * `corrected`  : sandwich-corrected regression calibration estimates   * optional `details` `return_details = TRUE`","code":""},{"path":"https://lbw080526.github.io/RegCalReliab/reference/RC_ExReliab.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Unified Regression Calibration Wrapper (External Reliability Study) — RC_ExReliab","text":"","code":"library(mgcv) #> Loading required package: nlme #> This is mgcv 1.9-3. For overview type 'help(\"mgcv-package\")'. set.seed(123) add_err <- function(v, sd = sqrt(0.4)) v + rnorm(length(v), 0, sd)  ## --- Example 1: External 1Z 0W --- x <- rnorm(3000) z.main <- x[1:1500] + rnorm(1500, 0, sqrt(0.4)) z_rep <- rbind(   cbind(add_err(x[1501:2000]), add_err(x[1501:2000]), NA, NA),   cbind(add_err(x[2001:2400]), add_err(x[2001:2400]), add_err(x[2001:2400]), NA),   cbind(add_err(x[2401:3000]), add_err(x[2401:3000]),         add_err(x[2401:3000]), add_err(x[2401:3000])) ) colnames(z_rep) <- paste0(\"z_\", 1:4) Y <- rbinom(1500, 1, plogis(-2.3 + log(1.5) * x[1:1500])) main_data <- data.frame(Y = Y, z = z.main) rep_data  <- data.frame(z_rep, check.names = FALSE) res1 <- RC_ExReliab(Y ~ z(z_1, z_2, z_3, z_4), main_data, rep_data, link = \"logistic\") res1$corrected #>              Estimate Std. Error    z value    Pr(>|z|)        OR     CI.low #> (Intercept) -2.439767 0.09612526 -25.381117 2.000000000 0.0871812 0.07221033 #> z            0.283015 0.10867516   2.604229 0.009208109 1.3271251 1.07252077 #>               CI.high #> (Intercept) 0.1052559 #> z           1.6421697  ## --- Example 2: External 1Z 1W --- x <- rnorm(3000) W_main <- rnorm(1500) W_rep  <- rnorm(1500) z.main <- x[1:1500] + rnorm(1500, 0, sqrt(0.4)) z_rep <- rbind(   cbind(add_err(x[1501:2000]), add_err(x[1501:2000]), NA, NA),   cbind(add_err(x[2001:2400]), add_err(x[2001:2400]), add_err(x[2001:2400]), NA),   cbind(add_err(x[2401:3000]), add_err(x[2401:3000]),         add_err(x[2401:3000]), add_err(x[2401:3000])) ) colnames(z_rep) <- paste0(\"z_\", 1:4) Y <- rbinom(1500, 1, plogis(-2.3 + log(1.5) * x[1:1500] + 0.5 * W_main)) main_data <- data.frame(Y = Y, z = z.main, W = W_main) rep_data  <- data.frame(z_rep, W = W_rep, check.names = FALSE) res2 <- RC_ExReliab(Y ~ z(z_1, z_2, z_3, z_4) + W, main_data, rep_data, link = \"logistic\") res2$corrected #>               Estimate Std. Error    z value     Pr(>|z|)        OR     CI.low #> (Intercept) -2.1748410 0.08906444 -24.418735 2.000000e+00 0.1136262 0.09542571 #> z            0.2759814 0.09232740   2.989160 2.797452e-03 1.3178234 1.09968052 #> W            0.4279343 0.08398317   5.095477 3.478635e-07 1.5340854 1.30125259 #>               CI.high #> (Intercept) 0.1352981 #> z           1.5792391 #> W           1.8085788  ## --- Example 3: External 2Z 0W --- x <- mgcv::rmvn(3000, c(0, 0), matrix(c(1, 0.3, 0.3, 1), 2)) z.main <- x[1:1500, ] + matrix(rnorm(1500 * 2, 0, sqrt(0.4)), 1500, 2) colnames(z.main) <- c(\"z1\", \"z2\") z1_rep <- rbind(   cbind(add_err(x[1501:2000, 1]), add_err(x[1501:2000, 1]), NA, NA),   cbind(add_err(x[2001:2400, 1]), add_err(x[2001:2400, 1]), add_err(x[2001:2400, 1]), NA),   cbind(add_err(x[2401:3000, 1]), add_err(x[2401:3000, 1]),         add_err(x[2401:3000, 1]), add_err(x[2401:3000, 1])) ) colnames(z1_rep) <- paste0(\"z1_\", 1:4) z2_rep <- rbind(   cbind(add_err(x[1501:2000, 2]), add_err(x[1501:2000, 2]), NA, NA),   cbind(add_err(x[2001:2400, 2]), add_err(x[2001:2400, 2]), add_err(x[2001:2400, 2]), NA),   cbind(add_err(x[2401:3000, 2]), add_err(x[2401:3000, 2]),         add_err(x[2401:3000, 2]), add_err(x[2401:3000, 2])) ) colnames(z2_rep) <- paste0(\"z2_\", 1:4) Y <- rbinom(1500, 1, plogis(-2.3 + log(1.5) * rowSums(x[1:1500, ]))) main_data <- data.frame(Y = Y, z1 = z.main[, 1], z2 = z.main[, 2]) rep_data  <- data.frame(z1_rep, z2_rep, check.names = FALSE) res3 <- RC_ExReliab(   Y ~ z1(z1_1, z1_2, z1_3, z1_4) + z2(z2_1, z2_2, z2_3, z2_4),   main_data, rep_data, link = \"logistic\" ) res3$corrected #>               Estimate Std. Error    z value     Pr(>|z|)        OR   CI.low #> (Intercept) -2.2593965 0.09444947 -23.921749 2.000000e+00 0.1044135 0.086768 #> z1           0.2657353 0.11124472   2.388745 1.690601e-02 1.3043898 1.048851 #> z2           0.5326281 0.10950870   4.863797 1.151548e-06 1.7034032 1.374364 #>               CI.high #> (Intercept) 0.1256474 #> z1          1.6221866 #> z2          2.1112183"},{"path":"https://lbw080526.github.io/RegCalReliab/reference/RC_InReliab.html","id":null,"dir":"Reference","previous_headings":"","what":"Unified Regression Calibration Wrapper (Internal Reliability Study) — RC_InReliab","title":"Unified Regression Calibration Wrapper (Internal Reliability Study) — RC_InReliab","text":"single formula interface regression calibration internal reliability studies. user simply specifies `link = \"linear\"`, `\"logistic\"`, `\"log\"`, wrapper selects appropriate model:   * `\"linear\"`   → Gaussian (identity link)   * `\"logistic\"` → Binomial (logit link)   * `\"log\"`      → Poisson (log link)","code":""},{"path":"https://lbw080526.github.io/RegCalReliab/reference/RC_InReliab.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Unified Regression Calibration Wrapper (Internal Reliability Study) — RC_InReliab","text":"","code":"RC_InReliab(   formula,   main_data,   link = c(\"linear\", \"logistic\", \"log\"),   return_details = FALSE )"},{"path":"https://lbw080526.github.io/RegCalReliab/reference/RC_InReliab.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Unified Regression Calibration Wrapper (Internal Reliability Study) — RC_InReliab","text":"formula formula character string `Y ~ sbp(sbp2, sbp3) + chol(chol2, chol3) + age + weight`. Terms form `var(rep1, rep2, ...)` treated error-prone exposures replicates `main_data`; terms treated covariates W. main_data Data frame holding outcome, replicate error-prone exposures, covariates. link Character; one `\"linear\"`, `\"logistic\"`, `\"log\"`. return_details Logical; `TRUE`, return parsed, prepared, RC internals.","code":""},{"path":"https://lbw080526.github.io/RegCalReliab/reference/RC_InReliab.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Unified Regression Calibration Wrapper (Internal Reliability Study) — RC_InReliab","text":"list :   * `uncorrected`: naive regression estimates   * `corrected`  : sandwich-corrected regression calibration estimates   * optional `details` `return_details = TRUE`","code":""},{"path":"https://lbw080526.github.io/RegCalReliab/reference/RC_InReliab.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Unified Regression Calibration Wrapper (Internal Reliability Study) — RC_InReliab","text":"","code":"set.seed(123) add_err <- function(v, sd = sqrt(0.4)) v + rnorm(length(v), 0, sd)  ## --- Example 1: Internal 1Z 0W --- x <- rnorm(3000) z <- rbind(   cbind(add_err(x[1:1500]), NA, NA, NA),   cbind(add_err(x[1501:2000]), add_err(x[1501:2000]), NA, NA),   cbind(add_err(x[2001:2400]), add_err(x[2001:2400]), add_err(x[2001:2400]), NA),   cbind(add_err(x[2401:3000]), add_err(x[2401:3000]),         add_err(x[2401:3000]), add_err(x[2401:3000])) ) colnames(z) <- paste0(\"z_\", 1:4) Y <- rbinom(3000, 1, plogis(-2.65 + log(1.5) * x)) main_data <- data.frame(Y, z) res1 <- RC_InReliab(Y ~ myz(z_1, z_2, z_3, z_4),                     main_data = main_data,                     link = \"logistic\") res1$corrected #>               Estimate Std. Error    z value     Pr(>|z|)        OR     CI.low #> (Intercept) -2.7171752 0.07701872 -35.279412 2.000000e+00 0.0660611 0.05680495 #> myz          0.3411573 0.08265864   4.127304 3.670418e-05 1.4065745 1.19619582 #>                CI.high #> (Intercept) 0.07682551 #> myz         1.65395313  ## --- Example 2: Internal 1Z 1W --- x  <- rnorm(3000) W1 <- rnorm(3000) z <- rbind(   cbind(add_err(x[1:1500]), NA, NA, NA),   cbind(add_err(x[1501:2000]), add_err(x[1501:2000]), NA, NA),   cbind(add_err(x[2001:2400]), add_err(x[2001:2400]), add_err(x[2001:2400]), NA),   cbind(add_err(x[2401:3000]), add_err(x[2401:3000]),         add_err(x[2401:3000]), add_err(x[2401:3000])) ) colnames(z) <- paste0(\"z_\", 1:4) Y <- rbinom(3000, 1, plogis(-2.65 + log(1.5) * x + 0.5 * W1)) main_data <- data.frame(Y, z, W1) res2 <- RC_InReliab(Y ~ myz(z_1, z_2, z_3, z_4) + W1,                     main_data = main_data,                     link = \"logistic\") res2$corrected #>               Estimate Std. Error    z value     Pr(>|z|)         OR     CI.low #> (Intercept) -2.5679464 0.07450904 -34.464900 2.000000e+00 0.07669288 0.06627224 #> myz          0.4930941 0.07141417   6.904709 5.030643e-12 1.63737454 1.42350522 #> W1           0.4994671 0.06588726   7.580633 3.438739e-14 1.64784292 1.44820967 #>                CI.high #> (Intercept) 0.08875205 #> myz         1.88337587 #> W1          1.87499527  ## --- Example 3: Internal 2Z 0W --- x <- mgcv::rmvn(3000, c(0,0), matrix(c(1,0.3,0.3,1), 2)) z1 <- rbind(   cbind(add_err(x[1:1500, 1]), NA, NA, NA),   cbind(add_err(x[1501:2000, 1]), add_err(x[1501:2000, 1]), NA, NA),   cbind(add_err(x[2001:2400, 1]), add_err(x[2001:2400, 1]), add_err(x[2001:2400, 1]), NA),   cbind(add_err(x[2401:3000, 1]), add_err(x[2401:3000, 1]),         add_err(x[2401:3000, 1]), add_err(x[2401:3000, 1])) ) colnames(z1) <- paste0(\"z1_\", 1:4) z2 <- rbind(   cbind(add_err(x[1:1500, 2]), NA, NA, NA),   cbind(add_err(x[1501:2000, 2]), add_err(x[1501:2000, 2]), NA, NA),   cbind(add_err(x[2001:2400, 2]), add_err(x[2001:2400, 2]), add_err(x[2001:2400, 2]), NA),   cbind(add_err(x[2401:3000, 2]), add_err(x[2401:3000, 2]),         add_err(x[2401:3000, 2]), add_err(x[2401:3000, 2])) ) colnames(z2) <- paste0(\"z2_\", 1:4) Y <- rbinom(3000, 1, plogis(-2.65 + log(1.5) * rowSums(x))) main_data <- data.frame(Y, z1, z2) res3 <- RC_InReliab(   Y ~ myz1(z1_1, z1_2, z1_3, z1_4) + myz2(z2_1, z2_2, z2_3, z2_4),   main_data = main_data,   link = \"logistic\") res3$corrected #>               Estimate Std. Error    z value     Pr(>|z|)         OR     CI.low #> (Intercept) -2.6495693 0.07952853 -33.315959 2.000000e+00 0.07068165 0.06047984 #> myz1         0.4285456 0.08305847   5.159566 2.475230e-07 1.53502342 1.30441027 #> myz2         0.4835185 0.09087986   5.320414 1.035313e-07 1.62177059 1.35715958 #>                CI.high #> (Intercept) 0.08260431 #> myz1        1.80640779 #> myz2        1.93797389"},{"path":"https://lbw080526.github.io/RegCalReliab/news/index.html","id":"regcalreliab-010","dir":"Changelog","previous_headings":"","what":"RegCalReliab 0.1.0","title":"RegCalReliab 0.1.0","text":"Initial CRAN submission.","code":""}]
